const axios = require('axios');
const chalk = require('chalk');
const fs = require('fs');
const path = require('path');

module.exports = {
  config: {
    name: "‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà",
    description: "‡∏™‡∏∏‡πà‡∏°‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô",
    usage: "/‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà",
    permissions: [],
    aliases: ["match"],
  },

  run: async ({ api, event, args }) => {
    try {
      const threadID = event.threadID;
      const senderID = event.senderID;

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°
      const threadInfo = await api.getThreadInfo(threadID);
      const participants = threadInfo.participantIDs;

      // ‡∏Å‡∏≥‡∏à‡∏±‡∏î‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏ö‡∏≠‡∏ó‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠
      const filteredParticipants = participants.filter(id => id !== senderID && id !== api.getCurrentUserID());

      if (filteredParticipants.length === 0) {
        return api.sendMessage("‚ùó ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ.", threadID);
      }

      // ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ñ‡∏ô
      const randomIndex = Math.floor(Math.random() * filteredParticipants.length);
      const matchedUserID = filteredParticipants[randomIndex];

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      const matchedUserInfo = await api.getUserInfo(matchedUserID);
      const senderInfo = await api.getUserInfo(senderID);

      const matchedUserName = matchedUserInfo[matchedUserID].name;
      const senderName = senderInfo[senderID].name;

      // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå (‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà)
      const getProfilePicURL = (userID) => {
        return `https://graph.facebook.com/${userID}/picture?type=large`;
      };

      const senderPhotoURL = getProfilePicURL(senderID);
      const matchedUserPhotoURL = getProfilePicURL(matchedUserID);

      // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
      const downloadImage = async (url, filePath) => {
        const response = await axios({
          url,
          method: 'GET',
          responseType: 'stream',
        });
        return new Promise((resolve, reject) => {
          const writer = fs.createWriteStream(filePath);
          response.data.pipe(writer);
          writer.on('finish', resolve);
          writer.on('error', reject);
        });
      };

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå
      const tempDir = path.join(__dirname, 'temp');
      if (!fs.existsSync(tempDir)) {
        fs.mkdirSync(tempDir);
      }

      // ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
      const senderPhotoPath = path.join(tempDir, `${senderID}.jpg`);
      const matchedUserPhotoPath = path.join(tempDir, `${matchedUserID}.jpg`);

      await downloadImage(senderPhotoURL, senderPhotoPath);
      await downloadImage(matchedUserPhotoURL, matchedUserPhotoPath);

      // ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô
      const compatibility = Math.floor(Math.random() * 51) + 50; // 50 - 100
      const compatibilityDescription = compatibility >= 90 ? "‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! üíñ" :
        compatibility >= 75 ? "‡∏î‡∏µ‡∏°‡∏≤‡∏Å! üòä" :
          compatibility >= 60 ? "‡∏î‡∏µ! üôÇ" : "‡∏û‡∏≠‡πÉ‡∏ä‡πâ! üòÖ";

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
      const message = `
üíë **‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!**

üë§ **‡∏Ñ‡∏∏‡∏ì:** ${senderName}

üë§ **‡∏Ñ‡∏π‡πà‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:** ${matchedUserName}

‚ù§Ô∏è **‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô:** ${compatibility}% ${compatibilityDescription}
      `;

      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
      const attachments = [
        fs.createReadStream(senderPhotoPath),
        fs.createReadStream(matchedUserPhotoPath),
      ];

      await api.sendMessage({ body: message, attachment: attachments }, threadID);

      // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
      fs.unlinkSync(senderPhotoPath);
      fs.unlinkSync(matchedUserPhotoPath);

    } catch (error) {
      console.error(chalk.red("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà:"), error);
      return api.sendMessage("‚ùó ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà.", event.threadID);
    }
  }
};
