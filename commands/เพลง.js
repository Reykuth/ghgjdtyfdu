onStart: async function ({ api, event }) {
    const axios = require("axios");
    const fs = require("fs-extra");
    const ytdl = require("@distube/ytdl-core");
    const yts = require("yt-search");
    const path = require("path");

    const input = event.body || "";
    const song = input.substring(6).trim(); // Assume command is "/‡πÄ‡∏û‡∏•‡∏á <‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á>"

    if (!song) {
      return api.sendMessage("‚ùó ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤!", event.threadID);
    }

    try {
      const sendMsg = await api.sendMessage(`‚åõ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏û‡∏•‡∏á üîé "${song}"`, event.threadID);

      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏û‡∏•‡∏á‡∏ö‡∏ô YouTube
      const searchResults = await yts(song);
      if (!searchResults.videos || !searchResults.videos.length) {
        return api.sendMessage("‚ùó ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤", event.threadID, event.messageID);
      }

      const video = searchResults.videos[0];
      const videoUrl = video.url;
      const videoTitle = video.title;
      const videoAuthor = video.author.name;

      // ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏û‡∏•‡∏á
      const stream = ytdl(videoUrl, { filter: "audioonly" });
      const tempDir = path.join(__dirname, "cache");
      if (!fs.existsSync(tempDir)) fs.mkdirSync(tempDir);

      const filePath = path.join(tempDir, `music-${Date.now()}.mp3`);
      const writeStream = fs.createWriteStream(filePath);

      stream.pipe(writeStream);

      stream.on("response", () => {
        console.info("[DOWNLOADER]", `‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏û‡∏•‡∏á: ${videoTitle}`);
      });

      stream.on("end", async () => {
        console.info("[DOWNLOADER] ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô");

        // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏û‡∏•‡∏á"
        await api.unsendMessage(sendMsg.messageID);

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå
        if (fs.statSync(filePath).size > 26214400) { // 25MB
          fs.unlinkSync(filePath);
          return api.sendMessage("‚ùó ‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô 25MB ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡πÑ‡∏î‡πâ", event.threadID);
        }

        // ‡∏™‡πà‡∏á‡πÄ‡∏û‡∏•‡∏á
        const message = {
          body: `üéµ **‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á**: ${videoTitle}\nüé§ **‡∏®‡∏¥‡∏•‡∏õ‡∏¥‡∏ô**: ${videoAuthor}`,
          attachment: fs.createReadStream(filePath),
        };

        api.sendMessage(message, event.threadID, () => {
          // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à
          fs.unlinkSync(filePath);
        });
      });

      stream.on("error", (error) => {
        console.error("[ERROR]", error);
        api.sendMessage("‚ùó ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏û‡∏•‡∏á", event.threadID);
        if (fs.existsSync(filePath)) fs.unlinkSync(filePath);
      });
    } catch (error) {
      console.error("[ERROR]", error);
      api.sendMessage("‚ùó ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á", event.threadID);
    }
  }
};
