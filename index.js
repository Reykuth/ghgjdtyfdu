// index.js
const fs = require("fs");
const login = require("ryuu-fca-api");
const axios = require("axios");
const express = require("express");
const chalk = require("chalk");
const figlet = require("figlet");

const prefix = "/";

// ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå commands
const commands = {};
if (fs.existsSync("./commands")) {
  fs.readdirSync("./commands").forEach(file => {
    if (file.endsWith(".js")) {
      const command = require(`./commands/${file}`);
      commands[command.config.name.toLowerCase()] = command;
      console.log(chalk.green(`üì¶ ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: ${command.config.name}`));
    }
  });
}

// ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå events
const events = {};
if (fs.existsSync("./events")) {
  fs.readdirSync("./events").forEach(file => {
    if (file.endsWith(".js")) {
      const eventCommand = require(`./events/${file}`);
      if (eventCommand.config && eventCommand.config.eventType) {
        eventCommand.config.eventType.forEach(type => {
          if (!events[type]) events[type] = [];
          events[type].push(eventCommand);
        });
        console.log(chalk.blue(`üîî ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå: ${file}`));
      }
    }
  });
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Simsimi API
const simiApiKey = "RHQgp8DIh5.ixcWFpjwmcC4tIO1rPV-b89.5_seS";
const simiUrl = "https://wsapi.simsimi.com/190410/talk";
const simiLang = "th";

async function handleAutoReply(message) {
  try {
    const response = await axios.post(simiUrl, {
      utext: message,
      lang: simiLang
    }, {
      headers: {
        "Content-Type": "application/json",
        "x-api-key": simiApiKey
      }
    });
    const { atext } = response.data;
    return atext;
  } catch (error) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö SimSimi:", error);
    return "‚ùó ‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ SimSimi";
  }
}

// Set ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏ã‡πâ‡∏≥
const respondedMessages = new Set();

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö Facebook
login({ appState: JSON.parse(fs.readFileSync("appstate.json", "utf8")) }, (err, api) => {
  if (err) {
    console.error(chalk.red("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö:"), err);
    return;
  }

  console.log(
    chalk.yellow(
      figlet.textSync("Bot Started!", {
        horizontalLayout: "default",
        verticalLayout: "default",
      })
    )
  );
  console.log(chalk.green(`‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ñ‡∏∑‡∏≠ "${prefix}"`));

  api.setOptions({ listenEvents: true });

  api.listenMqtt(async (err, event) => {
    if (err) {
      console.error(chalk.red("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ü‡∏±‡∏á:"), err);
      return;
    }

    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏≥‡∏û‡∏ß‡∏Å logMessageType
    if (event.logMessageType && events[event.logMessageType]) {
      for (const eventCommand of events[event.logMessageType]) {
        try {
          await eventCommand.run({ api, event, axios });
          console.log(chalk.blue(`üîÑ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå: ${eventCommand.config.name}`));
        } catch (error) {
          console.error(chalk.red(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå "${eventCommand.config.name}":`), error);
        }
      }
    }

    if (event.type === "message") {
      const userID = event.senderID;
      const messageID = event.messageID;
      const message = event.body ? event.body.trim() : "";

      if (!message || userID === api.getCurrentUserID()) return;

      // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏ã‡πâ‡∏≥
      if (respondedMessages.has(messageID)) return;
      respondedMessages.add(messageID);
      setTimeout(() => {
        respondedMessages.delete(messageID);
      }, 10000);

      // ‡πÄ‡∏ä‡πá‡∏Ñ prefix
      if (message.startsWith(prefix)) {
        const args = message.slice(prefix.length).trim().split(/ +/);
        const commandName = args.shift().toLowerCase();
        const command = commands[commandName];

        if (command && typeof command.run === 'function') {
          try {
            await command.run({ api, event, args, user: null });
            console.log(chalk.green(`‚úÖ ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: ${commandName}`));
          } catch (error) {
            console.error(chalk.red("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á:"), error);
            api.sendMessage("‚ùó ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á", event.threadID, event.messageID);
          }
        } else {
          // ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ‡∏ï‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ Simsimi
          const replyText = await handleAutoReply(message);
          api.sendMessage(replyText, event.threadID, event.messageID);
        }

      } else {
        // ‡πÑ‡∏°‡πà‡∏°‡∏µ prefix ‡∏ï‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ Simsimi
        const replyText = await handleAutoReply(message);
        api.sendMessage(replyText, event.threadID, event.messageID);
      }
    }

    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ message_reply ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    if (event.type === "message_reply") {
      if (!global.client) global.client = {};
      if (!global.client.handleReply) global.client.handleReply = [];

      const { messageID, senderID } = event;
      for (const handleReply of global.client.handleReply) {
        if (handleReply.messageID == messageID && handleReply.author == senderID) {
          try {
            const command = commands[handleReply.name];
            if (command && typeof command.handleReply === 'function') {
              await command.handleReply({ api, event, handleReply });
              global.client.handleReply = global.client.handleReply.filter(item => item.messageID != messageID);
              console.log(chalk.magenta(`üîÑ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ handleReply ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: ${handleReply.name}`));
              break;
            }
          } catch (error) {
            console.error(chalk.red("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ handleReply:"), error);
          }
        }
      }
    }
  });
});

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå Express ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
const app = express();
const PORT = process.env.PORT || 3000;

app.get("/", (req, res) => {
  res.send("ü§ñ ‡∏ö‡∏≠‡∏ó‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà!");
});

app.listen(PORT, () => {
  console.log(chalk.cyan(`üåê ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏≠‡∏£‡πå‡∏ï ${PORT}`));
});
